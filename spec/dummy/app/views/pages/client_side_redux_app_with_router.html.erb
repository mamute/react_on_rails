<%= render "header" %>

<%= react_component("ReduxRouterApp", @app_props_server_render, prerender: false, trace: true, generator_function: true) %>
<hr/>

<h1>Redux Component Client Rendered With react-router</h1>
<p>
  This example demonstrates client side rendering using Redux with react-router<br/><br/>
  The source HTML of this page will only show a DIV with an ID matching ReduxRouterApp.<br/>
  <pre>
    <%= '<div id="ReduxRouterApp-react-component-0"></div>' %>
  </pre>
</p>

<hr/>
<h2>Setup</h2>
<ol>
  <li>
    Create redux with router listening component: spec/dummy/client/app/components/HelloWorldWithRouter.jsx
  </li>
  <li>
    Create redux container: spec/dummy/client/app/components/HelloWorldContainer.jsx
  </li>
  <li>
    Create redux app client side: spec/dummy/client/app/startup/ClientReduxRouterApp.jsx
  </li>
  <li>
    Create redux app server side: spec/dummy/client/app/startup/ServerReduxRouterApp.jsx
  </li>
  <li>
    Expose the Redux Component on the client side:
    spec/dummy/client/app/startup/clientGlobals.jsx
    <br/>
    <pre>
    import ReduxRouterApp from './ClientReduxRouterApp';
    window.ReduxRouterApp = ReduxRouterApp;
    </pre>
  </li>
  <li>
    Expose the Redux Component on the server side:
    spec/dummy/client/app/startup/serverGlobals.jsx
    <br/>
    <pre>
    import ReduxRouterApp from './ServerReduxRouterApp';
    global.ReduxRouterApp = ReduxRouterApp;
    </pre>
  </li>
  <li>
    Place the component on the view: spec/dummy/app/views/pages/server_side_redux_app_with_router.html.erb
    <br/>
    <pre>
    <%%= react_component("ReduxRouterApp", @app_props_server_render, prerender: false, trace: true, generator_function: true) %>
    </pre>
  </li>
</ol>
