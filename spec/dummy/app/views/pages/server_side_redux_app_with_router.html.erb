<%= render "header" %>

<%= react_component("ReduxRouterApp", @app_props_server_render, prerender: true, trace: true, generator_function: true) %>
<hr/>

<h1>Redux Component Server Rendered With react-router</h1>
<p>
  This example demonstrates server side rendering using Redux with react-router. The only difference from client rendering is that
  the <code>prerender</code> option is true.<br/><br/>
  The source HTML of this page will show the server rendered HTML.<br/>
  <pre>
    <%= '<div id="ReduxRouterApp-react-component-0"><section data-reactid=".a5t6rnkiyo"><header data-reactid=".a5t6rnkiyo.0">' %>
    <%= '<ul data-reactid=".a5t6rnkiyo.0.0"><li data-reactid=".a5t6rnkiyo.0.0.0"><a class="" href="/server_side_redux_app_with_router" data-reactid=".a5t6rnkiyo.0.0.0.0">Hello World Router</a></li>' %>
    <%= '<li data-reactid=".a5t6rnkiyo.0.0.1"><a class="" href="/server_side_redux_app_with_router/react-router-redirect" data-reactid=".a5t6rnkiyo.0.0.1.0">Hello World Router Redirect</a></li></ul></header>' %>
    <%= '<div class="container" data-reactid=".a5t6rnkiyo.1"><h1 data-reactid=".a5t6rnkiyo.1.1">React Router is working!</h1><p data-reactid=".a5t6rnkiyo.1.2">' %>
    <%= '<span data-reactid=".a5t6rnkiyo.1.2.0">Woohoo, we can use </span><code data-reactid=".a5t6rnkiyo.1.2.1">react-router</code><span data-reactid=".a5t6rnkiyo.1.2.2"> here!</span></p></div></section></div>' %>
    <%= '<div class="container" data-reactid=".a5t6rnkiyo.1"><h1 data-reactid=".a5t6rnkiyo.1.1">React Router is working!</h1>' %>
    <%= '<p data-reactid=".a5t6rnkiyo.1.2"><span data-reactid=".a5t6rnkiyo.1.2.0">Woohoo, we can use </span>' %>
    <%= '<code data-reactid=".a5t6rnkiyo.1.2.1">react-router</code><span data-reactid=".a5t6rnkiyo.1.2.2"> here!</span></p></div></section></div>' %>

  </pre>
</p>

<hr/>
<h2>Setup</h2>
<ol>
  <li>
    Create redux with router listening component: spec/dummy/client/app/components/HelloWorldWithRouter.jsx
  </li>
  <li>
    Create redux container: spec/dummy/client/app/components/HelloWorldContainer.jsx
  </li>
  <li>
    Create redux app client side: spec/dummy/client/app/startup/ClientReduxRouterApp.jsx
  </li>
  <li>
    Create redux app server side: spec/dummy/client/app/startup/ServerReduxRouterApp.jsx
  </li>
  <li>
    Expose the Redux Component on the client side:
    spec/dummy/client/app/startup/clientGlobals.jsx
    <br/>
    <pre>
    import ReduxRouterApp from './ClientReduxRouterApp';
    window.ReduxRouterApp = ReduxRouterApp;
    </pre>
  </li>
  <li>
    Expose the Redux Component on the server side:
    spec/dummy/client/app/startup/serverGlobals.jsx
    <br/>
    <pre>
    import ReduxRouterApp from './ServerReduxRouterApp';
    global.ReduxRouterApp = ReduxRouterApp;
    </pre>
  </li>
  <li>
    Place the component on the view: spec/dummy/app/views/pages/server_side_redux_app_with_router.html.erb
    <br/>
    <pre>
    <%%= react_component("ReduxRouterApp", @app_props_server_render, prerender: true, trace: true, generator_function: true) %>
    </pre>
  </li>
</ol>
